#+OPTIONS: num:nil toc:nil
#+OPTIONS: date:nil reveal_mathjax:t
#+OPTIONS: tex t
#+OPTIONS: timestamp:nil
#+OPTIONS: org-confirm-babel-evaluate nil
#+REVEAL_THEME: white
#+REVEAL_HLEVEL: 1
#+REVEAL_ROOT: file:///home/rodrigo/reveal.js

#+Title: Sistemas de tipos
#+Author: Construção de compiladores I


* Objetivos

** Objetivos

- Apresentar os conceitos de tipagem dinâmica e estática em linguagens.

- Mostrar como especificar a análise semântica utilizando um sistema de tipos.

** Objetivos

- Apresentar as propriedades teóricas relevantes em sistemas de tipos.


* Motivação

** Motivação

- Praticamente todas as linguagens de programação utilizam alguma forma de *tipo*.

- Apesar de não parecer, algumas linguagens usam tipos durante a execução...
  - Chamamos isso de *tipagem dinâmica*.
  - Exemplos: Python, Javascript e Lua.

** Motivação

- Quando a verificação é feita durante o processo de compilação, chamamos de *tipagem estática*.
  - Exemplos: C/C++, Java, Haskell e Rust.

** Motivação

- Algumas vantagens do uso de tipos:
  - Prevenção de erros e segurança.

  - Manutenibilidade e reuso de código.

  - Otimização de código.

** Motivação

- Algumas vantagens do uso de tipos:
  - Gerenciamento de memória.

  - Suporte a polimorfismo e abstração.

  - Desenvolvimento dirigido por tipos.


** Motivação

- Exemplo (Python)

#+begin_src python
x = 5;
y = "teste";
x + y;
#+end_src

** Motivação

- Exemplo (C)

#+begin_src c
int* createArray() {
  int arr[5] = {1,2,3,4,5};
  return arr
}

int main () {
  int* ptr = createArray();
  printf("%d",ptr[0]);
  return 0;
}
#+end_src

** Motivação

- Exemplo (Rust)

#+begin_src rust
fn create_array() -> &Vec<i32> {
  let arr = vec![1,2,3,4,5];
  &arr
}
#+end_src

** Motivação

- Sistemas de tipos são uma técnica de análise para evitar comportamentos indesejados em programas.

- Para entender melhor sistemas de tipos, vamos incluir tipos na linguagem L2.


* A linguagem L3

** A linguagem L3

- A linguagem L3 permite a declaraçãod e tipos de variáveis.

- Para isso, inclui:

  - Booleanos e operações sobre estes.

  - Strings e operações sobre estas.

** A linguagem L3

- Sintaxe de L3

\begin{array}{ll}
P & \to\:  S\, P\:|\:\lambda\\
S & \to\:  let\:v : \tau := E ;\\
  & \mid\: read(E,v);\,|\,print(E); \,|\, S_1 ; S_2\\
T & \mid\:Int\,|\,Bool\,|\,String
\end{array}


** A linguagem L3

- Sintaxe de L3

\begin{array}{ll}
E & \to\:  n \,|\, v \,|\, s\,|\, b\,|\,E + E\,|\, E - E\,|\,E*E\\
  & \mid\:E < E\,|\,E = E\,|\,E / E\,|\,E\,\&\&\,E\,|\,!\,E\\
  & \mid\: strcat(E,E)\,|\,strsize(E)\,|\,i2s(E)\,|\,i2b(E)\\
  & \mid\: b2s(E)\,|\,b2i(E)\,|\,s2i(E)\,|\,s2b(E)\\
\end{array}


** A linguagem L3

- Semântica de L3
  - Idêntica a de L2.

- Novas operações:
  - Operações sobre strings.
  - Operações para conversão entre tipos.

** A linguagem L3

- Operações sobre string:
  - =strcat= : concatenação de string
  - =strsize= : tamanho de uma string

** A linguagem L3

- Operações de conversão entre tipos:
  - =i2s=: conversão de inteiro para string.
  - =i2b=: conversão de inteiro para booleano.

** A linguagem L3

- Novas operações:
  - =s2b=: conversão de string para booleano
  - =i2b=: conversão de inteiro para booleano.

** A linguagem L3

- Operações de conversão entre tipos:
  - =b2i=: conversão de booleano para inteiro.
  - =b2s=: conversão de booleano para string.

** A linguagem L3

- Representamos um sistema de tipos por um conjunto de regras de dedução para
  - $\Gamma \vdash P\leadsto \Gamma'$

- Dado um contexto \Gamma e um programa P, produzimos um novo contexto \Gamma'
  contendo as declarações de variáveis presentes em P

** A linguagem L3

- Representação das regras de tipos para expressões

- $\Gamma \vdash E : T$ é dedutível se a expressão E possui o tipo T no contexto \Gamma.

** A linguagem L3

- Regras para constantes e variáveis

\begin{array}{cc}
  \dfrac{}{\Gamma \vdash n : Int} &
  \dfrac{}{\Gamma \vdash s : String} \\ \\
  \dfrac{}{\Gamma \vdash b : Bool} &
  \dfrac{\Gamma(v) = T}{\Gamma \vdash v : T}
\end{array}

** A linguagem L3

- Operações aritméticas

\begin{array}{c}
  \dfrac{\Gamma \vdash E_1 : Int\:\:\:\:\Gamma\vdash E_2 : Int}
        {\Gamma \vdash E_1 \bullet E_2 : Int}\\ \\

  \bullet \in \{+,-,*,/\}
\end{array}

** A linguagem L3

- Operações booleanos

\begin{array}{c}
  \dfrac{\Gamma \vdash E_1 : Bool\:\:\:\:\Gamma\vdash E_2 :Bool}
        {\Gamma \vdash E_1 \&\& E_2 : Bool}\\ \\
  \dfrac{\Gamma \vdash E_1 : Bool}
        {\Gamma \vdash !\,E_1 : Bool}\\ \\
\end{array}

** A linguagem L3

- Operações relacionais

\begin{array}{c}
  \dfrac{\Gamma \vdash E_1 : T\:\:\:\:\Gamma\vdash E_2 : T}
        {\Gamma \vdash E_1 \bullet E_2 : Bool}\\ \\

  \bullet \in \{<,=\}
\end{array}

** A linguagem L3

- Operações sobre strings

\begin{array}{c}
  \dfrac{\Gamma \vdash E_1 : String\:\:\:\:\:\Gamma\vdash E_2 : String}
        {\Gamma \vdash strcat(E_1,E_2) : Bool} \\ \\
  \dfrac{\Gamma \vdash E_1 : String}
        {\Gamma \vdash strsize(E_1) : Int} \\ \\
\end{array}

** A linguagem L3

- Conversões de tipos

\begin{array}{cc}
  \dfrac{\Gamma \vdash E_1 : Int}
        {\Gamma \vdash i2s(E_1) : String} &
  \dfrac{\Gamma \vdash E_1 : Int}
        {\Gamma \vdash i2b(E_1) : Bool}
\end{array}

** A linguagem L3

- Conversões de tipos

\begin{array}{cc}
  \dfrac{\Gamma \vdash E_1 : Bool}
        {\Gamma \vdash b2s(E_1) : String} &
  \dfrac{\Gamma \vdash E_1 : Bool}
        {\Gamma \vdash b2i(E_1) : Int}
\end{array}

** A linguagem L3

- Conversões de tipos

\begin{array}{cc}
  \dfrac{\Gamma \vdash E_1 : String}
        {\Gamma \vdash s2b(E_1) : Bool} &
  \dfrac{\Gamma \vdash E_1 : String}
        {\Gamma \vdash s2i(E_1) : Int}
\end{array}


** A linguagem L3

- Definição de variáveis.

\begin{array}{c}
  \dfrac{\Gamma(v) = \bot\:\:\:\:\Gamma \vdash E_1 : T}
        {\Gamma \vdash let\:v : T = E_1 \leadsto \Gamma , v : T}
\end{array}

** A linguagem L3

- Atribuição.

\begin{array}{c}
  \dfrac{\Gamma(v) = T\:\:\:\:\Gamma \vdash E_1 : T}
        {\Gamma \vdash v := E_1 \leadsto \Gamma}
\end{array}

** A linguagem L3

- Comando read.

\begin{array}{c}
  \dfrac{\Gamma\vdash E_1 : String \:\:\:\:\Gamma(v) = T}
        {\Gamma\vdash read(E_1, v) \leadsto \Gamma}
\end{array}

** A linguagem L3

- Comando print.

\begin{array}{c}
  \dfrac{\Gamma\vdash E_1 : String}
        {\Gamma\vdash print(E_1) \leadsto \Gamma}
\end{array}

** A linguagem L3

- Sequência de comandos

\begin{array}{c}
  \dfrac{\Gamma\vdash S_1 \leadsto \Gamma_1\:\:\:\:\Gamma_1\vdash S_2 \leadsto \Gamma'}
        {\Gamma\vdash S_1 ; S_2 \leadsto \Gamma'}
\end{array}

* Propriedades

** Propriedades

- Um sistema de tipos é semanticamente correto se programas aceitos pelo sistema de tipos não
  resultam em erros de tempo de execução.

- Essa propriedade é conhecida como *soundness*.

** Propriedades

- O soundness é normalmente dividido em duas demonstrações:
  - Progresso: Se $\Gamma \vdash E : T$ então E é um valor ou pode ser avaliado a um valor.
  - Preservação: Se $\Gamma \vdash E : T$ então existe v tal que E \Downarrow v e $\Gamma \vdash v : T$.

** Propriedades

- Demonstrar o soundness de um sistema de tipos é uma tarefa importante do projeto de uma linguagem.

- Diversos trabalhos de pesquisa dedicam-se a esta finalidade.

** Propriedades

- Atualmente, grande parte das pesquisas na área usam assistentes de provas, como Coq e Lean, para
  validar essas demonstrações.

** Propriedades

- Existem linguagens que possuem tipos e não atendem essas propriedades?

** Propriedades

- C não atende progresso.
  - Programas C podem não reduzir a valores, mesmo sendo bem tipados, por falhas de
    acesso a posições inválidas de memória, buffer overflow, dereferenciação de ponteiros nulos, etc.

** Propriedades

- C não atende preservação.
  - Programas C que usam aritmética de ponteiros e casts inválidos não atendem preservação.

** Propriedades

- Existem linguagens que atendem essas propriedades?
  - Haskell, Standard ML e partes de Rust são exemplos de linguagens que possuem provas de progresso e prevervação.

* Conclusão

** Conclusão

- Nesta aula apresentamos sistemas de tipos como uma forma de especificar a etapa de análise
  semântica em compiladores.

- Apresentamos as propriedades de progresso e preservação e sua importância no projeto de uma linguagem.
