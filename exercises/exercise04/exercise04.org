#+TITLE:     Exercício prático 04
#+SUBTITLE:  BCC328 - Construção de Compiladores I
#+AUTHOR:    Prof. Rodrigo Ribeiro
#+EMAIL:     rodrigo.ribeiro@ufop.edu.br
#+DATE:      {{{time(%d-%m-%Y)}}}
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t ^:nil _:nil
#+OPTIONS:   H:3 num:nil
#+STARTUP:   showall
#+STARTUP:   align
#+latex_class: article
#+latex_class_options: [a4paper,11pt]
#+LATEX_HEADER: \usepackage[table]{xcolor}
#+LATEX_HEADER: \usepackage[margin=0.9in,bmargin=1.0in,tmargin=1.0in]{geometry}
#+LATEX_HEADER: \usepackage{algorithm2e}
#+LATEX_HEADER: \usepackage{algorithm}
#+LATEX_HEADER: \usepackage{amsmath}
#+LATEX_HEADER: \usepackage{arydshln}
#+LATEX_HEADER: \usepackage{subcaption}
#+LaTeX_HEADER: \newcommand{\point}[1]{\noindent \textbf{#1}}
#+LaTeX_HEADER: \usepackage{hyperref}
#+LaTeX_HEADER: \usepackage{csquotes}
#+LATEX_HEADER: \usepackage{graphicx}
#+LATEX_HEADER: \usepackage{bm}
#+LATEX_HEADER: \usepackage{subfig}
#+LaTeX_HEADER: \usepackage[mla]{ellipsis}
#+LaTeX_HEADER: \parindent = 0em
#+LaTeX_HEADER: \setlength\parskip{.5\baselineskip}
#+LaTeX_HEADER: \usepackage{pgf}
#+LaTeX_HEADER: \usepackage{tikz}
#+LaTeX_HEADER: \usetikzlibrary{shapes,arrows,automata,quotes}
#+LaTeX_HEADER: \usepackage[latin1]{inputenc}
#+LATEX_HEADER: \usepackage{adjustbox}

* Analisador LALR para a linguagem L1

O objetivo desta atividade é a implementação de um analisador sintático LALR 
para a linguagem L1 utilizando o gerador Happy.

* A Linguagem L1

A linguagem L1 permite a definição de programas simples sem qualquer tipo de desvio de controle.
Programas são apenas uma sequência de comandos. Existem apenas três tipos de comandos em L1:
atribuições, leitura de valores (**read**) e impressão (**print**).

** Sintaxe da linguagem L1

A sintaxe da linguagem L1 é definida pela seguinte gramática livre de contexto:

\begin{array}{lcl}
P & \to  & S\, P\:|\:\lambda\\
S & \to  & v := E ; \\
  & \mid & read(E,v);\\
  & \mid & print(E); \\
E & \to  & n \\
  & \mid & v \\
  & \mid & s \\
  & \mid & E + E \\
  & \mid & E - E \\
  & \mid & E * E \\
  & \mid & E \ E \\
\end{array}

A gramática é formada por três variáveis: $P,\,S$ e $E$; e pelos seguintes tokens (símbolos do alfabeto):

- $v$: representam identificadores. O token de identificador segue as regras usuais presentes em linguagens de programação:
  um identitificador começa com uma letra seguida de uma sequência de zero ou mais dígitos ou letras.

- $n$: representam constantes numéricas. No momento, vamos suportar apenas números inteiros (tanto positivos, quanto negativos).

- $s$: representam literais de strings. A linguagem L1 utiliza aspas duplas para delimitar literais de string.

** Programa de exemplo

A seguir, apresentamos um programa escrito na linguagem L1:

#+begin_src
x := 0;
read("Digite o valor de x:", x);
print("O valor de x ao quadrado é:" + (x * x));
#+end_src

* Detalhes da entrega

** O que deverá ser implementado

Você deverá criar um analisador LALR utilizando 
o gerador Happy. Como resultado, você deverá imprimir a 
árvore de sintaxe produzida por seu analisador, utilizando a função 
=show= definida para os tipos da árvore sintática.

#+begin_src haskell
lalrParser :: FilePath -> IO ()
lalrParser file = error "Not implemented!"
#+end_src

presente no arquivo src/L1/L1.hs, que é o arquivo principal para implementações da linguagem L1. 
A função anterior recebe um nome de arquivo e executa os seguintes passos: 1) lê o conteúdo do arquivo; 2) realizar a análise sintática do conteúdo do arquivo e 3) imprime a árvore de sintaxe produzida.

A implementação da árvore sintática para programas L1 está presente no arquivo =Syntax.hs=
na pasta L1.Frontend.

** Como será feita a entrega

- As entregas serão feitas utilizando a plataforma Github classroom.

